<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2012 John Nesky

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE.
-->

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns="beepbox.editor.*"
                   width="700"
                   height="645"
                   backgroundColor="0x000000"
                   borderVisible="false"
                   borderWeight="0"
                   creationComplete="init()"
                   addedToStage="onAddedToStage()">
	<fx:Script><![CDATA[
		import flash.display.*;
		import flash.events.*;
		import flash.geom.*;
		import flash.media.*;
		import flash.text.*;
		import flash.ui.*;
		import flash.utils.*;
	    import flash.desktop.*;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Menu;
		import mx.events.MenuEvent;
		
		import beepbox.synth.*;
		
		/*
		public static const channelColorsDim:    Array = [0x449944, 0x777744, 0xaa4444, 0x666666];
		public static const channelColorsBright: Array = [0x44ff44, 0xffff44, 0xff8844, 0xaaaaaa];
		public static const noteColorsDim:       Array = [0x66dd66, 0xcccc66, 0xdd8866, 0xaaaaaa];
		public static const noteColorsBright:    Array = [0xccffcc, 0xffffcc, 0xffddcc, 0xeeeeee];
		*/
		public static const channelColorsDim:    Array = [0x0099a1, 0xa1a100, 0xc75000, 0x6f6f6f];
		public static const channelColorsBright: Array = [0x25f3ff, 0xffff25, 0xff9752, 0xaaaaaa];
		public static const noteColorsDim:       Array = [0x00bdc7, 0xc7c700, 0xff771c, 0xaaaaaa];
		public static const noteColorsBright:    Array = [0x92f9ff, 0xffff92, 0xffcdab, 0xeeeeee];
		
		[Bindable]
		public var doc: Document;
		
		[Bindable]
		private var scaleNames: ArrayCollection;
		[Bindable]
		private var keyNames: ArrayCollection;
		[Bindable]
		private var tempoNames: ArrayCollection;
		[Bindable]
		private var partNames: ArrayCollection;
		[Bindable]
		private var waveNames: ArrayCollection;
		[Bindable]
		private var filterNames: ArrayCollection;
		[Bindable]
		private var attackNames: ArrayCollection;
		[Bindable]
		private var effectNames: ArrayCollection;
		[Bindable]
		private var chorusNames: ArrayCollection;
		[Bindable]
		private var volumeNames: ArrayCollection;
		[Bindable]
		private var instrumentNames: ArrayCollection;
		[Bindable]
		private var drumNames: ArrayCollection;
		
		private var patternEditor: PatternEditor;
		private var editMenu: Menu;
		private var optionsMenu: Menu;
		private var copyNotes: Array;
		private var copyBeats: int = 0;
		private var copyParts: int = 0;
		private var copyDrums: Boolean = false;
		private var prompt: UIComponent;
		private var wasPlaying: Boolean;
		
		public function init():void {
			scaleNames = new ArrayCollection(Music.scaleNames);
			keyNames = new ArrayCollection(Music.keyNames);
			tempoNames = new ArrayCollection(Music.tempoNames);
			partNames = new ArrayCollection(Music.partNames);
			waveNames = new ArrayCollection(Music.waveNames);
			filterNames = new ArrayCollection(Music.filterNames);
			attackNames = new ArrayCollection(Music.attackNames);
			effectNames = new ArrayCollection(Music.effectNames);
			chorusNames = new ArrayCollection(Music.chorusNames);
			volumeNames = new ArrayCollection(Music.volumeNames);
			drumNames = new ArrayCollection(Music.drumNames);
			instrumentNames = new ArrayCollection();
			patternEditor = new PatternEditor(doc);
			patternEditorContainer.addChild(patternEditor);
			doc.watch(onUpdated);
			onUpdated();
			
			editorBox.addEventListener(MouseEvent.MOUSE_DOWN, refocusStage);
		}
		
		private function setPrompt(newPrompt: UIComponent): void {
			wasPlaying = doc.synth.playing;
			if (wasPlaying) togglePlay();
			mainLayer.transform.colorTransform = new ColorTransform(0.5, 0.5, 0.5, 1.0, 0, 0, 0, 0);
			mainLayer.mouseChildren = false;
			mainLayer.tabChildren = false;
			prompt = newPrompt;
			addElement(prompt);
			stage.focus = prompt;
		}
		
		private function closePrompt(): void {
			stage.focus = stage;
			removeElement(prompt);
			prompt = null;
			mainLayer.transform.colorTransform = new ColorTransform();
			mainLayer.mouseChildren = true;
			mainLayer.tabChildren = true;
			if (wasPlaying) togglePlay();
		}
		
		private function refocusStage(event: Event): void {
			stage.focus = stage;
		}
		
		private function onUpdated(): void {
			scaleDropDown.selectedIndex = doc.song.scale;
			keyDropDown.selectedIndex = doc.song.key;
			tempoSlider.value = doc.song.tempo;
			reverbSlider.value = doc.song.reverb;
			partDropDown.selectedIndex = Music.partCounts.indexOf(doc.song.parts);
			if (doc.channel == 3) {
				filterDropDownGroup.visible = false;
				chorusDropDownGroup.visible = false;
				effectDropDownGroup.visible = false;
				waveDropDown.dataProvider = drumNames;
			} else {
				filterDropDownGroup.visible = true;
				chorusDropDownGroup.visible = true;
				effectDropDownGroup.visible = true;
				waveDropDown.dataProvider = waveNames;
			}
			
			var pattern: BarPattern = doc.getCurrentPattern();
			
			patternSettingsLabel.visible    = doc.song.instruments > 1 && pattern != null;
			instrumentDropDownGroup.visible = doc.song.instruments > 1 && pattern != null;
			while (instrumentNames.length < doc.song.instruments) instrumentNames.addItem(instrumentNames.length + 1);
			while (instrumentNames.length > doc.song.instruments) instrumentNames.removeItemAt(instrumentNames.length - 1);
			
			var instrument: int = doc.getCurrentInstrument();
			waveDropDown.selectedIndex   = doc.song.instrumentWaves[doc.channel][instrument];
			filterDropDown.selectedIndex = doc.song.instrumentFilters[doc.channel][instrument];
			attackDropDown.selectedIndex = doc.song.instrumentAttacks[doc.channel][instrument];
			effectDropDown.selectedIndex = doc.song.instrumentEffects[doc.channel][instrument];
			chorusDropDown.selectedIndex = doc.song.instrumentChorus[doc.channel][instrument];
			channelVolumeSlider.value = -doc.song.instrumentVolumes[doc.channel][instrument];
			instrumentDropDown.selectedIndex = instrument;
			
			//currentState = doc.showLetters ? (doc.showScrollBar ? "showPianoAndScrollBar" : "showPiano") : (doc.showScrollBar ? "showScrollBar" : "hideAll");
			
			if (doc.showLetters && piano.parent == null) patternContainerContainer.addElementAt(piano, 0);
			if (!doc.showLetters && piano.parent != null) patternContainerContainer.removeElement(piano);
			if (doc.showScrollBar && octaveScrollBar.parent == null) patternContainerContainer.addElement(octaveScrollBar);
			if (!doc.showScrollBar && octaveScrollBar.parent != null) patternContainerContainer.removeElement(octaveScrollBar);
			if (doc.song.bars > 16 && barScrollBar.parent == null) editorBox.addElement(barScrollBar);
			if (doc.song.bars <= 16 && barScrollBar.parent != null) editorBox.removeElement(barScrollBar);
			
			var patternWidth: int = 512;
			if (doc.showLetters) patternWidth -= 32;
			if (doc.showScrollBar) patternWidth -= 20;
			patternEditorContainer.width = patternWidth;
			
			var trackHeight: int = 128;
			if (doc.song.bars > 16) trackHeight -= 20;
			trackEditor.height = trackHeight;
			
			volumeSlider.value = doc.volume;
		}
		
		private function onAddedToStage(): void {
			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPressed);
			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyReleased);
		}
		
		private function onKeyPressed(event: KeyboardEvent): void {
			//if (event.ctrlKey)
			//trace(event.keyCode)
			switch (event.keyCode) {
				case 32: // space
					stage.focus = stage;
					togglePlay();
					break;
				case 90: // z
					if (event.shiftKey) {
						doc.history.redo();
					} else {
						doc.history.undo();
					}
					break;
				case 89: // y
					doc.history.redo();
					break;
				case 67: // c
					copy();
					break;
				case 86: // v
					paste();
					break;
				case 219: // left brace
					doc.synth.prevBar();
					break;
				case 221: // right brace
					doc.synth.nextBar();
					break;
				case 71: // g
					doc.synth.stutterPressed = true;
					break;
				case 189: // -
					transpose(false);
					break;
				case 187: // +
					transpose(true);
					break;
			}
		}
		
		private function onKeyReleased(event: KeyboardEvent): void {
			switch (event.keyCode) {
				case 71: // g
					doc.synth.stutterPressed = false;
					break;
			}
		}
		
		private function togglePlay(): void {
			if (doc.synth.playing) {
				doc.synth.pause();
				doc.synth.snapToBar();
				playButton.label = "Resume";
			} else {
				doc.synth.play();
				playButton.label = "Pause";
			}
		}
		
		private function copy(): void {
			var pattern: BarPattern = doc.getCurrentPattern();
			if (pattern == null) return;
			copyNotes = pattern.cloneNotes();
			copyBeats = doc.song.beats;
			copyParts = doc.song.parts;
			copyDrums = doc.channel == 3;
		}
		
		private function paste(): void {
			if (!canPaste()) return;
			doc.history.record(new ChangePaste(doc, copyNotes));
		}
		
		private function canPaste(): Boolean {
			return doc.getCurrentPattern() != null && copyNotes != null && copyBeats == doc.song.beats && copyParts == doc.song.parts && copyDrums == (doc.channel == 3);
		}
		
		private function cleanSlate(): void {
			doc.history.record(new ChangeSong(doc, new Song()));
			patternEditor.resetCopiedPins();
		}
		
		private function transpose(upward: Boolean): void {
			var pattern: BarPattern = doc.getCurrentPattern();
			if (pattern == null) return;
			doc.history.record(new ChangeTranspose(doc, pattern, upward));
		}
		/*
		private function openPublishPrompt(): void {
			setPrompt(PublishPrompt.make(doc, closePrompt));
		}
		*/
		private function openExportPrompt(): void {
			setPrompt(ExportPrompt.make(doc, closePrompt));
		}
		
		private function copyToClipboard(): void {
			Clipboard.generalClipboard.clear();
			Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, "http://www.beepbox.co/#" + doc.song.toString());
		}
		
		private function onSetScale(): void {
			doc.history.record(new ChangeScale(doc, scaleDropDown.selectedIndex));
		}
		
		private function onSetKey(): void {
			doc.history.record(new ChangeKey(doc, keyDropDown.selectedIndex));
		}
		
		private function onSetTempo(): void {
			doc.history.record(new ChangeTempo(doc, tempoSlider.value));
		}
		
		private function onSetReverb(): void {
			doc.history.record(new ChangeReverb(doc, reverbSlider.value));
		}
		
		private function onSetParts(): void {
			doc.history.record(new ChangeParts(doc, Music.partCounts[partDropDown.selectedIndex]));
		}
		
		private function onSetWave(): void {
			doc.history.record(new ChangeWave(doc, waveDropDown.selectedIndex));
		}
		
		private function onSetFilter(): void {
			doc.history.record(new ChangeFilter(doc, filterDropDown.selectedIndex));
		}
		
		private function onSetAttack(): void {
			doc.history.record(new ChangeAttack(doc, attackDropDown.selectedIndex));
		}
		
		private function onSetEffect(): void {
			doc.history.record(new ChangeEffect(doc, effectDropDown.selectedIndex));
		}
		
		private function onSetChorus(): void {
			doc.history.record(new ChangeChorus(doc, chorusDropDown.selectedIndex));
		}
		
		private function onSetVolume(): void {
			doc.history.record(new ChangeVolume(doc, -channelVolumeSlider.value));
		}
		
		private function onSetInstrument(): void {
			if (doc.getCurrentPattern() == null) return;
			doc.history.record(new ChangePatternInstrument(doc, instrumentDropDown.selectedIndex));
		}
		
		private function openEditMenu(): void {
			var editNameSpace: Namespace =  new Namespace("beepbox.editor.*");
			editMenuData.editNameSpace::menuitem.(@eventName == "undo")[0].@enabled = doc.history.canUndo();
			editMenuData.editNameSpace::menuitem.(@eventName == "redo")[0].@enabled = doc.history.canRedo();
			editMenuData.editNameSpace::menuitem.(@eventName == "paste")[0].@enabled = canPaste();
			
			editMenu = Menu.createMenu(this, editMenuData, false);
			editMenu.labelField = "@label";
			editMenu.addEventListener(MenuEvent.ITEM_CLICK, editMenuHandler);
		
			var point1:Point = new Point();
			point1 = editButton.localToGlobal(point1);
		
			editMenu.show(point1.x, point1.y + 20);
		}
		
		private function editMenuHandler(event:MenuEvent):void  {
			switch (String(event.item.@eventName)) {
				case "undo":
					doc.history.undo();
					break;
				case "redo":
					doc.history.redo();
					break;
				case "copy":
					copy();
					break;
				case "paste":
					paste();
					break;
				case "transposeUp":
					transpose(true);
					break;
				case "transposeDown":
					transpose(false);
					break;
				case "import":
					setPrompt(ImportPrompt.make(doc, closePrompt));
					break;
				case "clean":
					cleanSlate();
					break;
				case "duration":
					setPrompt(SongDurationPrompt.make(doc, closePrompt));
					break;
			}
		}
		
		private function openOptionsMenu(): void {
			var optionsNameSpace: Namespace =  new Namespace("beepbox.editor.*");
			optionsMenuData.optionsNameSpace::menuitem.(@eventName == "showLetters")[0].@toggled = doc.showLetters;
			optionsMenuData.optionsNameSpace::menuitem.(@eventName == "showFifth")[0].@toggled = doc.showFifth;
			optionsMenuData.optionsNameSpace::menuitem.(@eventName == "showChannels")[0].@toggled = doc.showChannels;
			optionsMenuData.optionsNameSpace::menuitem.(@eventName == "showScrollBar")[0].@toggled = doc.showScrollBar;
			
			optionsMenu = Menu.createMenu(this, optionsMenuData, false);
			optionsMenu.labelField = "@label";
			optionsMenu.addEventListener(MenuEvent.ITEM_CLICK, optionsMenuHandler);
		
			var point1:Point = new Point();
			point1 = optionsButton.localToGlobal(point1);
		
			optionsMenu.show(point1.x, point1.y + 20);
		}
		
		private function optionsMenuHandler(event:MenuEvent):void  {
			switch (String(event.item.@eventName)) {
				case "showLetters":
					doc.showLetters = !doc.showLetters;
					break;
				case "showFifth":
					doc.showFifth = !doc.showFifth;
					break;
				case "showChannels":
					doc.showChannels = !doc.showChannels;
					break;
				case "showScrollBar":
					doc.showScrollBar = !doc.showScrollBar;
					break;
			}
			doc.changed();
			doc.savePreferences();
		}
	]]></fx:Script>
	
	<s:HGroup width="100%" height="100%" id="mainLayer">
		<s:VGroup width="512" id="editorBox">
			<s:HGroup id="patternContainerContainer" width="512" height="481" gap="0">
				<Piano id="piano" doc="{doc}"/>
				<mx:UIComponent id="patternEditorContainer" width="100%" height="100%"/>
				<OctaveScrollBar id="octaveScrollBar" doc="{doc}"/>
			</s:HGroup>
			<TrackEditor doc="{doc}" id="trackEditor"/>
			<LoopEditor doc="{doc}"/>
			<BarScrollBar id="barScrollBar" doc="{doc}"/>
		</s:VGroup>
		<s:VGroup width="100%" height="100%">
			<s:VGroup id="songSettings" height="100%" width="100%">
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Spacer width="50%"/>
					<s:Label text="BeepBox version 1.1.5" color="0xbbbbbb" right="0"/>
					<s:Spacer width="50%"/>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Button id="playButton" label="Pause" click="togglePlay(); stage.focus = stage" width="100%"/>
					<s:HSlider id="volumeSlider" minimum="0" maximum="100" value="50" stepSize="1" snapInterval="1" liveDragging="true" showDataTip="false" change="doc.setVolume(volumeSlider.value); stage.focus = stage"/>
				</s:HGroup>
				<s:Button id="editButton" label="Edit Menu" click="openEditMenu();" width="100%"/>
				<s:Button id="optionsButton" label="Preferences Menu" click="openOptionsMenu();" width="100%"/>
				<!--<s:Button id="publishButton" label="Publishing Panel..." click="openPublishPrompt();" width="100%"/>-->
				<s:Button id="exportButton" label="Export" click="openExportPrompt();" width="100%"/>
				<s:Button id="copyButton" label="Copy URL to Clipboard" click="copyToClipboard();" width="100%"/>
				<s:Spacer height="100%"/>
				<s:Label text="Song Settings:" color="0xffffff"/>
				<s:HGroup width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Scale:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="scaleDropDown" dataProvider="{scaleNames}" width="90" change="onSetScale()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{scaleNames.length}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:HGroup width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Key:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="keyDropDown" dataProvider="{keyNames}" width="90" change="onSetKey()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{keyNames.length}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:HGroup width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Tempo:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:HSlider id="tempoSlider" width="90" minimum="0" maximum="11" value="7" stepSize="1" snapInterval="1" liveDragging="true" showDataTip="false" change="onSetTempo(); stage.focus = stage"/>
				</s:HGroup>
				<s:HGroup width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Reverb:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:HSlider id="reverbSlider" width="90" minimum="0" maximum="3" value="0" stepSize="1" snapInterval="1" liveDragging="true" showDataTip="false" change="onSetReverb(); stage.focus = stage"/>
				</s:HGroup>
				<s:HGroup width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Rhythm:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="partDropDown" dataProvider="{partNames}" width="90" change="onSetParts()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{partNames.length}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:Spacer height="20"/>
				<s:Label id="patternSettingsLabel" text="Pattern Settings:" color="0xffffff"/>
				<s:HGroup id="instrumentDropDownGroup" width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Instrument:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="instrumentDropDown" dataProvider="{instrumentNames}" width="120" change="onSetInstrument()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{4}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:Spacer height="20"/>
				<s:Label id="instrumentSettingsLabel" text="Instrument Settings:" color="0xffffff"/>
				<s:HGroup id="channelVolumeSliderGroup" width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Volume:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:HSlider id="channelVolumeSlider" width="120" minimum="-5" maximum="0" value="0" stepSize="1" snapInterval="1" liveDragging="true" showDataTip="false" change="onSetVolume(); stage.focus = stage"/>
				</s:HGroup>
				<s:HGroup id="waveDropDownGroup" width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Wave:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="waveDropDown" dataProvider="{waveNames}" width="120" change="onSetWave()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{4}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:HGroup id="attackDropDownGroup" width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Envelope:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="attackDropDown" dataProvider="{attackNames}" width="120" change="onSetAttack()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{4}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:HGroup id="filterDropDownGroup" width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Filter:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="filterDropDown" dataProvider="{filterNames}" width="120" change="onSetFilter()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{4}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:HGroup id="chorusDropDownGroup" width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Chorus:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="chorusDropDown" dataProvider="{chorusNames}" width="120" change="onSetChorus()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{4}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
				<s:HGroup id="effectDropDownGroup" width="100%" gap="0" verticalAlign="middle">
					<s:Label text="Effect:" color="0xbbbbbb"/>
					<s:Spacer width="100%"/>
					<s:DropDownList id="effectDropDown" dataProvider="{effectNames}" width="120" change="onSetEffect()" close="stage.focus = stage" right="0">
						<s:layout> <s:VerticalLayout requestedRowCount="{4}" horizontalAlign="justify"/> </s:layout>
					</s:DropDownList>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
	</s:HGroup>
	
	<fx:Declarations>
		<fx:XML id="editMenuData">
			<root>
				<menuitem label="Undo (Z)" eventName="undo"/>
				<menuitem label="Redo (Y)" eventName="redo"/>
				<menuitem label="Copy Pattern (C)" eventName="copy"/>
				<menuitem label="Paste Pattern (V)" eventName="paste"/>
				<menuitem label="Shift Notes Up (+)" eventName="transposeUp"/>
				<menuitem label="Shift Notes Down (-)" eventName="transposeDown"/>
				<menuitem label="Custom song size..." eventName="duration"/>
				<menuitem label="Import JSON..." eventName="import"/>
				<menuitem label="Clean Slate" eventName="clean"/>
			</root>
		</fx:XML>
		<fx:XML id="optionsMenuData">
			<root>
				<menuitem type="check" label="Show Piano" eventName="showLetters"/>
				<menuitem type="check" label="Highlight 'Fifth' Notes" eventName="showFifth"/>
				<menuitem type="check" label="Show All Channels" eventName="showChannels"/>
				<menuitem type="check" label="Octave Scroll Bar" eventName="showScrollBar"/>
			</root>
		</fx:XML>
	</fx:Declarations>
</s:BorderContainer>
